services:
  frontend:
    image: dispute-resolution-engine-frontend:latest
    ports:
      - "3000:3000"
    depends_on:
      - "api"
    restart: unless-stopped
  api:
    image: dispute-resolution-engine-api:latest
    ports:
      - "8080:8080"
    depends_on:
      - "postgres"
      - "redis-cache"
    environment:
      FILESTORAGE_ROOT: /app/filestorage # Root where dispute files will be stored
      FILESTORAGE_URL: https://capstone-dre.dns.net.za/filestorage # Root where dispute files will be served
    volumes:
      - evi_files:/app/filestorage       
    restart: unless-stopped
    logging:
      driver: loki
      options:
        loki-url: http://loki:3100/loki/api/v1/push
        mode: non-blocking
        max-buffer-size: 4m
        loki-retries: "3"
  redis-cache: # --------------------------------------------------------Redis
    image: redis:latest
    ports:
      - "6379:6379"
    command: sh -c 'redis-server --requirepass "$$REDIS_PASSWORD"'
  postgres:
    image: postgres:latest
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./initdb:/docker-entrypoint-initdb.d
  prometheus: # ----------------------------------------------------------Prometheus
    image: docker.io/prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    command: "--config.file=/etc/prometheus/prometheus.yml"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    restart: unless-stopped
  grafana: # -------------------------------------------------------------Grafana
    image: docker.io/grafana/grafana-oss
    container_name: grafana
    ports:
      - "3001:3000" # Changed Grafana's port to avoid conflict with frontend
    volumes:
      - grafana-data:/var/lib/grafana
    restart: unless-stopped
  cadvisor: # -----------------------------------------------------------Cadvisor
    image: gcr.io/cadvisor/cadvisor
    container_name: cadvisor
    privileged: true
    devices:
      - /dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    ports:
      - 8081:8080
    environment:
      - allowlisted_container_labels=com.docker.swarm.service.name
    restart: unless-stopped
  loki: # ---------------------------------------------------------------Loki
    image: grafana/loki
    ports:
      - "3100:3100"
    volumes:
      - loki-data:/loki
    command: -config.file=/etc/loki/loki-config.yaml
    configs:
      - source: loki-config
        target: /etc/loki/loki-config.yaml
    user: root
  promtail: # -----------------------------------------------------------Promtail
    image: grafana/promtail
    volumes:
      - /var/log:/var/log
      - /var/lib/docker/containers:/var/lib/docker/containers
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: -config.file=/etc/promtail/config.yaml
    configs:
      - source: promtail-config
        target: /etc/promtail/config.yaml   
volumes: # ---------------------------------------------------------------Volumes
  pgdata:
  evi_files:
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  loki-data:
    driver: local

configs: # ---------------------------------------------------------------Configs
  loki-config:
    file: ./loki-config.yaml
  promtail-config:
    file: ./promtail-config.yaml